// project/IronmanView/src/pages/RoutineDetail.jsx
import React, { useState, useEffect } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import '../styles/RoutineDetail.css';
import { useRoutine } from '../context/RoutineContext.jsx';
import PageWrapper from '../layouts/PageWrapper';
import axios from 'axios';

const RoutineDetail = () => {
  const navigate = useNavigate();
  const location = useLocation();
  const { updateRoutine } = useRoutine();

  const [routineDescription, setRoutineDescription] = useState('');

  const [routineName, setRoutineName] = useState('');
  const [exerciseList, setExerciseList] = useState([
    {
    name: 'Ïö¥Îèô ÏÑ†ÌÉù',
    part: '',
    exerciseId: null,
    sets: 3,
    reps: 10,
    exerciseTime: 60,  // Í∏∞Î≥∏Í∞í 60Ï¥à
    description: 'Ïö¥ÎèôÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî',
    image: '/images/exerciseImg/exercise_select.png',
    },
  ]);

 // ÎßåÏïΩ Î£®Ìã¥ÏùÑ ÌÜµÌï¥ Îì§Ïñ¥ÏôîÏùÑ Í≤ΩÏö∞(Ï≤òÏùåÏóêÎßå), Î£®Ìã¥Ïùò Ï†ïÎ≥¥ÎåÄÎ°ú Î¶¨Ïä§Ìä∏Î•º Îß§Ìïë
 // Ï≤òÏùåÏúºÎ°ú Î£®Ìã¥ÏùÑ ÎßåÎì§Îü¨ Îì§Ïñ¥ÏôîÏùÑ Í≤ΩÏö∞, Î£®Ìã¥ Ï†ïÎ≥¥ Îß§ÌïëÏùÄ ÏÉùÎûµÌïòÍ≥† Í∑∏ÎÉ• Ïö¥Îèô ÏÑ†ÌÉùÎßå Ï∂îÍ∞Ä
  useEffect(() => {
    const state = location.state;

    // Î£®Ìã¥ ÏàòÏ†ï(routine ÏûàÏùå)Ïù∏Îç∞ÎèÑ updatedExerciseÍ∞Ä ÏóÜÏúºÎ©¥ ‚Üí ÏÉàÎ°ú ÎßåÎì§Í∏∞ ÏúÑÌï¥ ÏßÑÏûÖÌïú Í≤É
    if (state && state.routine && !state.updatedExercise && state.index === undefined) {
      console.log('üîÅ location.state Ï¥àÍ∏∞Ìôî');
      navigate(location.pathname, { replace: true, state: {} });
    }

    const routine = location.state?.routine;
    if (routine?.exercises?.length > 0) {
      setRoutineDescription((prev) => prev || routine.summary || '');
      setRoutineName((prev) => prev || routine.name || '');

      const mappedExercises = routine.exercises.map((e) => ({
        ...e,
        description: e.name === 'Ïö¥Îèô ÏÑ†ÌÉù'
          ? 'Ïö¥ÎèôÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî'
          : `${e.part} Î∂ÄÏúÑÎ•º Í∞ïÌôîÌï©ÎãàÎã§.`,
        image: e.image || (e.name === 'Ïö¥Îèô ÏÑ†ÌÉù'
          ? '/images/exerciseImg/exercise_select.png'
          : '/images/sample-new.png'),
      }));

      // Îß® ÎßàÏßÄÎßâÏóê 'Ïö¥Îèô ÏÑ†ÌÉù'Ïù¥ ÏóÜÏúºÎ©¥ Ï∂îÍ∞Ä
      if (mappedExercises[mappedExercises.length - 1].name !== 'Ïö¥Îèô ÏÑ†ÌÉù') {
        mappedExercises.push({
          name: 'Ïö¥Îèô ÏÑ†ÌÉù',
          part: '',
          sets: 3,
          reps: 10,
          exerciseTime: 60,
          description: 'Ïö¥ÎèôÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî',
          image: '/images/exerciseImg/exercise_select.png',
        });
      }

      setExerciseList(mappedExercises);
    }
  }, []);  // ‚úÖ ÏµúÏ¥à ÏßÑÏûÖ ÏãúÎßå Ïã§Ìñâ

// ExerciseSearch ÏóêÏÑú ÏÑ†ÌÉùÌïú Ïö¥ÎèôÏùÑ Î∞õÏùÄ ÌõÑÏóê, Ìï¥Îãπ indexÏóê ÏûàÎäî Ïö¥ÎèôÏùÑ ÎçÆÏñ¥Ïì¥Îã§.
// Îã§Ïãú Ïö¥Îèô ÏÑ†ÌÉù Ïπ¥ÎìúÍ∞Ä Îß® ÎÅùÏóê ÏóÜÏúºÎ©¥ Ï∂îÍ∞Ä
  useEffect(() => {
    console.log('Ï¥àÍ∏∞ location.state:', location.state)

    const { updatedExercise, index } = location.state || {};

    if (updatedExercise && typeof updatedExercise === 'object' && index !== undefined) {

      setExerciseList((prevList) => {
        const updatedList = [...prevList];  // Í∏∞Ï°¥ Ïö¥Îèô Î¶¨Ïä§Ìä∏ Î≥µÏÇ¨
        updatedList[index] = {
          ...updatedList[index],
          exerciseId: updatedExercise.exerciseId,
          name: updatedExercise.name,
          part: updatedExercise.part,
          description: updatedExercise.name === 'Ïö¥Îèô ÏÑ†ÌÉù'
            ? 'Ïö¥ÎèôÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî'
            : `${updatedExercise.part} Î∂ÄÏúÑÎ•º Í∞ïÌôîÌï©ÎãàÎã§.`,
          image: updatedExercise.name === 'Ïö¥Îèô ÏÑ†ÌÉù'
            ? '/images/exerciseImg/exercise_select.png'
            : updatedExercise.image, 
        };

        // ÎßàÏßÄÎßâÏù¥ 'Ïö¥Îèô ÏÑ†ÌÉù'Ïù¥ ÏïÑÎãàÎ©¥ Ï∂îÍ∞Ä
        if (updatedList[updatedList.length - 1].name !== 'Ïö¥Îèô ÏÑ†ÌÉù') {
          updatedList.push({
            name: 'Ïö¥Îèô ÏÑ†ÌÉù',
            part: '',
            sets: 3,
            reps: 10,
            exerciseTime: 60,
            description: 'Ïö¥ÎèôÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî',
            image: '/images/exerciseImg/exercise_select.png',
          }); 
        }

        return updatedList;
      });

      // ‚úÖ ÏÉÅÌÉú Ï¥àÍ∏∞ÌôîÌï¥ÏÑú Ï§ëÎ≥µ ÏÑ†ÌÉù Î∞©ÏßÄ
      setTimeout(() => {
        navigate(location.pathname, { replace: true, state: {} });
      }, 0);
    }
  }, [location.state]);

  useEffect(() => {
    const state = location.state;

    // Î£®Ìã¥ ÏÉùÏÑ± Ïãú ÏÉàÎ°úÍ≥†Ïπ® (Îã® Ìïú Î≤àÎßå)
    if (state && state.routine && !state.updatedExercise && state.index === undefined) {
      console.log('üîÅ Î£®Ìã¥ ÏÉùÏÑ± - Í∞ïÏ†ú ÏÉàÎ°úÍ≥†Ïπ®');
      navigate(location.pathname, { replace: true, state: {} }); // Î®ºÏ†Ä state Ï¥àÍ∏∞Ìôî
      window.location.reload(); // Í∑∏Î¶¨Í≥† ÏÉàÎ°úÍ≥†Ïπ®
    }
  }, []);


  // Î∞±ÏóîÎìúÎ°ú Î£®Ìã¥ Ï†ÄÏû• Ï†ÑÏÜ°
  const handleSave = async () => {
    const routineData = {
      title: routineName,
      summary: routineDescription,
      exercises: exerciseList
      .filter((e) => e.name !== 'Ïö¥Îèô ÏÑ†ÌÉù' && e.exerciseId != null)
      .map((e) => ({
        exerciseId: e.exerciseId,
        part: e.part,
        sets: e.sets,
        reps: e.reps,
        exerciseTime: e.exerciseTime,
        })),
    };
    console.log(routineData);

    try {
      const response = await axios.post('http://localhost:329/web/api/routine/add', routineData, {
        withCredentials: true, // Ïù∏Ï¶ù ÌïÑÏöî Ïãú
        headers: { 'Content-Type': 'application/json' }
      });

      console.log('Î£®Ìã¥ Ï†ÄÏû• ÏÑ±Í≥µ:', response.data);
      navigate('/routine');

    } catch (error) {
      console.error('Î£®Ìã¥ Ï†ÄÏû• Ïã§Ìå®:', error);
      alert('Î£®Ìã¥ Ï†ÄÏû•Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
    }
  };

  // Î£®Ìã¥ ÌéòÏù¥ÏßÄÎ°ú ÎèåÏïÑÍ∞ÄÍ∏∞ Í∏∞Îä•
  const handleBack = () => {
    const confirmBack = window.confirm('Î≥ÄÍ≤Ω ÏÇ¨Ìï≠Ïù¥ Ï†ÄÏû•ÎêòÏßÄ ÏïäÏäµÎãàÎã§. Î£®Ìã¥ Î™©Î°ùÏúºÎ°ú ÎèåÏïÑÍ∞ÄÏãúÍ≤†ÏäµÎãàÍπå?');
    if (confirmBack) {
      navigate('/routine');
    }
  };

  // Ïö¥Îèô Ïπ¥Îìú ÌÅ¥Î¶≠ Ïãú Ïö¥Îèô Í≤ÄÏÉâÏúºÎ°ú Ïù¥Îèô
  const handleCardClick = (index) => {
    navigate('/search', {
      state: {
        index,  // ‚úÖ ÎàÑÎ•∏ Ïπ¥ÎìúÏùò index ÎÑòÍπÄ
        routine: {
          name: routineName,
          summary: routineDescription,
          exercises: exerciseList,  // ‚úÖ Ï†ÑÏ≤¥ Î¶¨Ïä§Ìä∏ ÎÑòÍπÄ
        },
      },
    });
  };
  
  // "Ïö¥Îèô ÏÑ†ÌÉù" Îßå ÏûàÏùÑ Í≤ΩÏö∞, Ï†ÄÏû• Î≤ÑÌäº ÎπÑÌôúÏÑ±Ìôî
  const hasSelectedExercise = exerciseList.some(
    (e) => e.name !== 'Ïö¥Îèô ÏÑ†ÌÉù' && e.exerciseId !== null
  );

  return (
    <PageWrapper>
      <div className="routine-detail-container">
        <div className="routine-detail-header">
          <input
            type="text"
            className="routine-name-input"
            value={routineName}
            onChange={(e) => setRoutineName(e.target.value)}
            placeholder="Î£®Ìã¥ Ïù¥Î¶ÑÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
          />
          <textarea
            className="routine-description-input"
            value={routineDescription}
            onChange={(e) => setRoutineDescription(e.target.value)}
            placeholder="Í∞ÑÎã®Ìïú ÏÑ§Î™ÖÏùÑ Ï†ÅÏñ¥Ï£ºÏÑ∏Ïöî"
          />
        </div>

        <div className="ex-list">
          {exerciseList.map((exercise, i) => {
          const isSelectable = exercise.name === 'Ïö¥Îèô ÏÑ†ÌÉù';

          return (
            <div
              key={i}
              className="ex-card"
              onClick={isSelectable ? () => handleCardClick(i) : undefined}
              style={{ cursor: isSelectable ? 'pointer' : 'default' }}
            >
              {!isSelectable && (
                <button
                  className="ex-remove-btn"
                  onClick={(e) => {
                    e.stopPropagation();
                    setExerciseList((prev) => prev.filter((_, idx) => idx !== i));
                  }}
                >
                  √ó
                </button>
              )}
              <div className="ex-info">
                <img src={exercise.image} alt={exercise.name} />
                <div className="ex-text">
                  <div className="ex-name">{exercise.name}</div>
                  <div className="ex-target">{exercise.description}</div>

                  {!isSelectable && (
                    <div className="ex-options">
                      <label>
                        ÏÑ∏Ìä∏:
                        <input
                          type="number"
                          value={exercise.sets || 0}
                          onClick={(e) => e.stopPropagation()}
                          onChange={(e) => {
                            const newList = [...exerciseList];
                            newList[i] = { ...newList[i], sets: parseInt(e.target.value, 10) };
                            setExerciseList(newList);
                          }}
                        />
                      </label>

                      <label>
                        Î∞òÎ≥µ:
                        <input
                          type="number"
                          value={exercise.reps || 0}
                          onClick={(e) => e.stopPropagation()}
                          onChange={(e) => {
                            const newList = [...exerciseList];
                            newList[i] = { ...newList[i], reps: parseInt(e.target.value, 10) };
                            setExerciseList(newList);
                          }}
                        />
                      </label>

                      <label>
                        ÏãúÍ∞Ñ(Ï¥à):
                        <input
                          type="number"
                          value={exercise.exerciseTime || 0}
                          onClick={(e) => e.stopPropagation()}
                          onChange={(e) => {
                            const newList = [...exerciseList];
                            newList[i] = { ...newList[i], exerciseTime: parseInt(e.target.value, 10) };
                            setExerciseList(newList);
                          }}
                        />
                      </label>
                    </div>
                  )}
                </div>
              </div>
            </div>
          );
        })}
        </div>
          <div className="routine-button-row">
            <button className="routine-back-button" onClick={handleBack}>ÎèåÏïÑÍ∞ÄÍ∏∞</button>

            {/* ‚úÖ Ïö¥Îèô Ï∂îÍ∞Ä Î≤ÑÌäº */}
            <button className="routine-add-button" onClick={() => {
              setExerciseList([...exerciseList, {
                name: 'Ïö¥Îèô ÏÑ†ÌÉù',
                part: '',
                exerciseId: null,
                sets: 3,
                reps: 10,
                exerciseTime: 1,
                description: 'Ïö¥ÎèôÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî',
                image: '/images/exerciseImg/exercise_select.png',
              }]);
            }}>
            Ïö¥Îèô Ï∂îÍ∞Ä
            </button> 
              <button 
                className="routine-save-button" 
                onClick={handleSave}
                disabled={!hasSelectedExercise}
              >
                Ï†ÄÏû•
              </button>
            </div>

      </div>
    </PageWrapper>
  );
};

export default RoutineDetail;
