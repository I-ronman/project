spring.application.name=Ironman

server.servlet.context-path=/web

server.port=329

server.servlet.session.timeout=1h

# DB정보 등록
# JDBC드라이버 -> 라이브러리 추가
# mybatis 라이브러리 필요 -> 드라이버 이름, 계정, 비밀번호, url설정
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://project-db-cgi.smhrd.com:3307/CGI_25IS_CLOUD_P3_1
spring.datasource.username=CGI_25IS_CLOUD_P3_1
spring.datasource.password=smhrd1

# prefix, suffix(접미사, 접두사) -> View Resolver
# 기본적으로 설정된 prefix와 suffix를 사용
# prefix -> templates
# suffix -> .html

# JPA(Java Persistence API)
# ---> No SQL 
# 개발자가 SQL구문을 작성할 필요 없이, 내부 구현체인 Hibernate도구를 사용하여
#	자동으로 class와 method를 기준으로 해서 SQL구문을 작성, 테이블 수정!

# 1. DB 문법 사용 설정
spring.jpa.database-platform=org.hibernate.dialect.MySQLDialect

# 2. 테이블 생성을 언제 진행할건지
# create : 서버를 재 시작할 때마다, 테이블 생성
# update : 수정이 일어날때만, 테이블 생성
# spring.jpa.hibernate.ddl-auto= create
spring.jpa.hibernate.ddl-auto= update

# 3. 생성되는 SQL구문 볼건지(선택사항)
spring.jpa.show-sql=true

# 4. SQL 구문 가독성 좋게 출력(선택사항)
spring.jpa.properties.hibernate.format_sql=true

spring.mail.host=smtp.naver.com
spring.mail.port=465
spring.mail.username=spit115@naver.com
spring.mail.password=CMN4JHZM6KZU
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.ssl.enable=true

# 소셜 로그인 기능
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}
spring.security.oauth2.client.registration.google.redirect-uri=http://localhost:329/web/login/oauth2/code/google
spring.security.oauth2.client.registration.google.scope=profile,email

spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/v2/auth?prompt=consent
spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
spring.security.oauth2.client.provider.google.user-info-uri=https://www.googleapis.com/oauth2/v3/userinfo
spring.security.oauth2.client.provider.google.user-name-attribute=sub
